{
    "sourceFile": "outputs copy.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1727322216961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1727322216961,
            "name": "Commit-0",
            "content": "---\ntitle: Output\ndescription: \"Understanding the outputs of the Chunkr API\"\n---\nThe ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs). \n\n![Model Diagram](sample2.png)\n\n## Segments vs. Chunks\n\n- **Segments**: These are the fundamental building blocks extracted from the document. Each segment represents a specific part of the document, such as a title, section header, paragraph, list item, table, picture, caption, formula, footnote, page header, or footer. Segments are identified using unique identifiers, precise bounding boxes, and their content type.\n\n- **Chunks**: Chunks are collections of one or more segments. They serve as higher-level groupings that can be used for various downstream applications like indexing, searching, or further analysis. The grouping of segments into chunks depends on the `target_chunk_length` parameter:\n\n  - **No Chunking (`target_chunk_length = 0`)**: Each segment is treated as an individual chunk, maintaining a one-to-one relationship and preserving the original document structure without additional grouping.\n\n  - **With Chunking (`target_chunk_length > 0`)**: Segments are grouped into chunks up to the defined length, excluding headers and footers to maintain content integrity. For example, with `target_chunk_length = 512`, each chunk can contain up to 512 words.\n\n## Segment and Chunk Models\n\n### Segment Model\n\nThe `Segment` model represents individual elements extracted from the document. It includes the following properties:\n\n- `segment_id`: Unique identifier for the segment.\n- `bbox`: Bounding box defining the segment's position on the page.\n- `page_number`: Integer specifying the page number.\n- `page_width`, `page_height`: Dimensions of the page.\n- `content`: Text content of the segment.\n- `segment_type`: Type of the segment (e.g., Title, Text, Table).\n- `ocr`: Optional OCR results associated with the segment.\n- `image`, `html`, `markdown`: Optional representations of the segment's content.\n\n### Chunk Model\n\nThe `Chunk` model represents a collection of segments. It consists of:\n\n- `segments`: An array of `Segment` objects.\n- `chunk_length`: Integer specifying the length of the chunk in words.\n\nFor detailed schema information, please refer to the API documentation.\n\n## Bounding Boxes and DPI\n\nAccurate annotation of segments relies on precise bounding boxes, which are determined based on the document's DPI (Dots Per Inch). DPI affects the scaling and positioning of elements within the document:\n\n- **Bounding Boxes**: Each segment has a bounding box defined by its top-left and bottom-right coordinates. These coordinates locate the segment within the page, ensuring that annotations and further processing align correctly with the original document layout.\n\n- **DPI Considerations**: The DPI setting influences how bounding boxes are calculated. By default, all incoming files are scaled to 150 DPI, and bounding box coordinates are based on this scaling to maintain consistency.\n\n## Annotating Segments and Chunks\n\nAnnotation involves visually highlighting segments within the document to provide clarity and facilitate further analysis. The `annotate.py` script is responsible for drawing bounding boxes around segments:\n\n```python\nimport fitz  # PyMuPDF\nfrom models import TaskResponse\nimport json\n\ndef draw_bounding_boxes(pdf_path: str, output_data: TaskResponse, output_path: str):\n    color_map = {\n        \"Caption\": (1, 0, 0),\n        \"Footnote\": (0, 1, 0),\n        \"Formula\": (0, 0, 1),\n        \"ListItem\": (1, 1, 0),\n        \"PageFooter\": (1, 0.5, 0),\n        \"PageHeader\": (0.5, 0, 0.5),\n        \"Picture\": (1, 0.75, 0.8),\n        \"SectionHeader\": (0.6, 0.3, 0),\n        \"Table\": (0.54, 0, 0),\n        \"Text\": (0, 0, 0),\n        \"Title\": (1, 0, 0)\n    }\n\n    pdf_document = fitz.open(pdf_path)\n\n    for chunk in output_data.chunks or []:\n        for seg in chunk.segments:\n            page = pdf_document[seg.page_number - 1]\n            rect = fitz.Rect(\n                seg.bbox.top_left[0],\n                seg.bbox.top_left[1],\n                seg.bbox.bottom_right[0],\n                seg.bbox.bottom_right[1]\n            )\n            color = color_map.get(seg.segment_type, (0, 0, 0))\n            page.draw_rect(rect, color=color, width=1)\n\n    pdf_document.save(output_path)\n    pdf_document.close()\n```\n\n### How It Works\n\n1. **Color Mapping**: Each segment type is assigned a specific color for easy differentiation during annotation.\n2. **Processing Segments**: The script iterates through all chunks and their respective segments, drawing rectangles around each segment based on their bounding box coordinates.\n\nBy understanding and utilizing segments and chunks effectively, along with accurate bounding box annotations, you can leverage the ChunkMyDocs API to its full potential, enabling robust document analysis and processing workflows.\n\n```\n\n```\n\n\n![Model Diagram](sample2.png)\n"
        }
    ]
}