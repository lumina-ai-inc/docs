{
    "sourceFile": "quickstart.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1727302191962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727302539525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,101 +7,4 @@\n 1. **Create an Account and Get API Key**\n \n    Go to [chunkr.ai](https://chunkr.ai) and create an account. Once logged in, navigate to your account settings or API section to obtain your API key.\n \n-2. **Set Up Environment Variables**\n-\n-   Create a `.env` file in your project directory and add your API key:\n-\n-   ```bash\n-   echo \"INGEST_SERVER__API_KEY=your_api_key_here\" > .env\n-   echo \"INGEST_SERVER__URL=https://api.chunkr.ai\" >> .env\n-   ```\n-\n-   Replace `your_api_key_here` with the actual API key you obtained from chunkr.ai.\n-\n-3. **Create the Script**\n-\n-   Create a new file named `process_documents.py` and copy the following code into it:\n-\n-   ```python\n-   import os, requests, time, glob, json\n-   from dotenv import load_dotenv\n-\n-   load_dotenv(override=True)\n-\n-   def get_base_url(): return os.getenv(\"INGEST_SERVER__URL\")\n-   def get_headers(): return {\"Authorization\": os.getenv(\"INGEST_SERVER__API_KEY\")}\n-\n-   def create_task(file_path):\n-       with open(file_path, \"rb\") as file:\n-           response = requests.post(f\"{get_base_url()}/api/task\",\n-               files={\"file\": (os.path.basename(file_path), file, \"application/pdf\")},\n-               data={\"model\": \"HighQuality\", \"target_chunk_length\": 0},\n-               headers=get_headers()\n-           )\n-       if response.status_code != 200:\n-           raise Exception(f\"API request failed with status code {response.status_code}: {response.text}\")\n-       return response.json()[\"task_url\"]\n-\n-   def get_task(task_url): return requests.get(task_url, headers=get_headers()).json()\n-\n-   def save_to_json(output, file_name):\n-       output_json_path = os.path.join(os.path.dirname(__file__), \"output\", f\"{file_name}_json.json\")\n-       os.makedirs(os.path.dirname(output_json_path), exist_ok=True)\n-       json.dump(output, open(output_json_path, \"w\"))\n-       return output_json_path\n-\n-   def process_files():\n-       for file_path in glob.glob(os.path.join(\"input\", \"*.pdf\")):\n-           try:\n-               task_url = create_task(file_path)\n-               while True:\n-                   task = get_task(task_url)\n-                   if task[\"status\"] == \"Succeeded\":\n-                       output = task.get(\"output\")\n-                       if output is None: raise Exception(f\"Output not found for {file_path}\")\n-                       output_json_path = save_to_json(output, os.path.basename(file_path).split(\".\")[0])\n-                       break\n-                   if task[\"status\"] in [\"Failed\", \"Canceled\"]:\n-                       break\n-                   time.sleep(1)\n-           except Exception as e:\n-               print(f\"Error processing {file_path}: {str(e)}\")\n-\n-   if __name__ == \"__main__\": process_files()\n-   ```\n-\n-4. **Install Required Packages**\n-\n-   Install the necessary Python packages:\n-\n-   ```bash\n-   pip install requests python-dotenv\n-   ```\n-\n-5. **Prepare Input Files**\n-\n-   Create an `input` folder in the same directory and place your PDF files there.\n-\n-6. Run the script to start processing:\n-\n-   ```bash\n-   python process_documents.py\n-   ```\n-\n-7. The script will process all PDF files in the `input` folder:\n-\n-   - It creates a task for each PDF file\n-   - Monitors the task status\n-   - When a task succeeds, it downloads the output (bounding boxes) and saves it as a JSON file in the `output` folder\n-\n-8. Check the console output for processing status and any error messages.\n-\n-9. Once completed, you'll find the JSON output files in the `output` folder, named after the original PDF files.\n-10. To annotate the PDF with the bounding boxes, you can use the `annotate_pdf.py` script in our github [repo](https://github.com/lumina-ai-inc/chunkr/blob/main/pyscripts/annotate.py)\n-\n-11. Here's an example of an annotated PDF with bounding boxes:\n-\n-![Annotated PDF Example](sample2.png)\n-\n-This image shows a PDF document with bounding boxes drawn around the detected text regions, demonstrating the output of the annotation process.\n"
                },
                {
                    "date": 1727302558655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,6 +5,6 @@\n ## Setup\n \n 1. **Create an Account and Get API Key**\n \n-   Go to [chunkr.ai](https://chunkr.ai) and create an account. Once logged in, navigate to your account settings or API section to obtain your API key.\n+   Go to [chunkr.ai](https://chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n \n"
                },
                {
                    "date": 1727302612362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,4 +7,9 @@\n 1. **Create an Account and Get API Key**\n \n    Go to [chunkr.ai](https://chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n \n+2. **CURL request**\n+\n+```bash\n+curl -X POST \"https://api.chunkr.ai/v1/process\" -H \"Authorization: Bearer YOUR_API_KEY\" -H \"Content-Type: application/json\" -d '{\"file_path\": \"path/to/your/document.pdf\"}'\n+```\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727302624600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,7 +9,7 @@\n    Go to [chunkr.ai](https://chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n \n 2. **CURL request**\n \n-```bash\n-curl -X POST \"https://api.chunkr.ai/v1/process\" -H \"Authorization: Bearer YOUR_API_KEY\" -H \"Content-Type: application/json\" -d '{\"file_path\": \"path/to/your/document.pdf\"}'\n-```\n\\ No newline at end of file\n+    ```bash\n+    curl -X POST \"https://api.chunkr.ai/v1/process\" -H \"Authorization: Bearer YOUR_API_KEY\" -H \"Content-Type: application/json\" -d '{\"file_path\": \"path/to/your/document.pdf\"}'\n+    ```\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727302978476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,6 +10,12 @@\n \n 2. **CURL request**\n \n     ```bash\n-    curl -X POST \"https://api.chunkr.ai/v1/process\" -H \"Authorization: Bearer YOUR_API_KEY\" -H \"Content-Type: application/json\" -d '{\"file_path\": \"path/to/your/document.pdf\"}'\n+    curl -X POST https://api.chunkmydocs.com/api/task \\\n+      -H \"Content-Type: multipart/form-data\" \\\n+      -H \"Authorization: YOUR_API_KEY\" \\\n+      -F \"file=@/path/to/your/file\" \\\n+      -F \"model=Fast\" \\\n+      -F \"target_chunk_length=512\" \\\n+      -F \"ocr_strategy=Auto\"\n     ```\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727302998440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n 1. **Create an Account and Get API Key**\n \n    Go to [chunkr.ai](https://chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n \n-2. **CURL request**\n+2. **Sample CURL Request**\n \n     ```bash\n     curl -X POST https://api.chunkmydocs.com/api/task \\\n       -H \"Content-Type: multipart/form-data\" \\\n"
                },
                {
                    "date": 1727303005836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,13 @@\n Checkout our github [repo](https://github.com/lumina-ai-inc/chunkr) for more examples and to view the full code.\n \n ## Setup\n \n-1. **Create an Account and Get API Key**\n+1. **Create an Account and Get an API Key**\n \n    Go to [chunkr.ai](https://chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n \n-2. **Sample CURL Request**\n+2. **CURL request**\n \n     ```bash\n     curl -X POST https://api.chunkmydocs.com/api/task \\\n       -H \"Content-Type: multipart/form-data\" \\\n"
                },
                {
                    "date": 1727303015813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+This guide provides a streamlined approach to using the Chunkr API for document processing and analysis with Python.\n+The way you use the API is by creating a task for each document you want to process, and then polling the task status until it is completed.\n+Checkout our github [repo](https://github.com/lumina-ai-inc/chunkr) for more examples and to view the full code.\n+\n+## Setup\n+\n+1. **Create an Account**\n+\n+   Go to [chunkr.ai](https://www.chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n+\n+2. **CURL request**\n+\n+    ```bash\n+    curl -X POST https://api.chunkmydocs.com/api/task \\\n+      -H \"Content-Type: multipart/form-data\" \\\n+      -H \"Authorization: YOUR_API_KEY\" \\\n+      -F \"file=@/path/to/your/file\" \\\n+      -F \"model=Fast\" \\\n+      -F \"target_chunk_length=512\" \\\n+      -F \"ocr_strategy=Auto\"\n+    ```\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727303080873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,31 +12,10 @@\n \n     ```bash\n     curl -X POST https://api.chunkmydocs.com/api/task \\\n       -H \"Content-Type: multipart/form-data\" \\\n-      -H \"Authorization: YOUR_API_KEY\" \\\n+      -H \"Authorization: ${API_KEY}\" \\\n       -F \"file=@/path/to/your/file\" \\\n       -F \"model=Fast\" \\\n       -F \"target_chunk_length=512\" \\\n       -F \"ocr_strategy=Auto\"\n-    ```\n-This guide provides a streamlined approach to using the Chunkr API for document processing and analysis with Python.\n-The way you use the API is by creating a task for each document you want to process, and then polling the task status until it is completed.\n-Checkout our github [repo](https://github.com/lumina-ai-inc/chunkr) for more examples and to view the full code.\n-\n-## Setup\n-\n-1. **Create an Account and Get an API Key**\n-\n-   Go to [chunkr.ai](https://chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n-\n-2. **CURL request**\n-\n-    ```bash\n-    curl -X POST https://api.chunkmydocs.com/api/task \\\n-      -H \"Content-Type: multipart/form-data\" \\\n-      -H \"Authorization: YOUR_API_KEY\" \\\n-      -F \"file=@/path/to/your/file\" \\\n-      -F \"model=Fast\" \\\n-      -F \"target_chunk_length=512\" \\\n-      -F \"ocr_strategy=Auto\"\n     ```\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727303125480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n     ```bash\n     curl -X POST https://api.chunkmydocs.com/api/task \\\n       -H \"Content-Type: multipart/form-data\" \\\n-      -H \"Authorization: ${API_KEY}\" \\\n+      -H \"Authorization: ${YOUR_API_KEY}\" \\\n       -F \"file=@/path/to/your/file\" \\\n       -F \"model=Fast\" \\\n       -F \"target_chunk_length=512\" \\\n       -F \"ocr_strategy=Auto\"\n"
                },
                {
                    "date": 1727303190241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n 1. **Create an Account**\n \n    Go to [chunkr.ai](https://www.chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n \n-2. **CURL request**\n+2. **Using the API with CURL**\n \n     ```bash\n     curl -X POST https://api.chunkmydocs.com/api/task \\\n       -H \"Content-Type: multipart/form-data\" \\\n"
                },
                {
                    "date": 1727303720954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n 1. **Create an Account**\n \n    Go to [chunkr.ai](https://www.chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n \n-2. **Using the API with CURL**\n+2. **Create a task with CURL**\n \n     ```bash\n     curl -X POST https://api.chunkmydocs.com/api/task \\\n       -H \"Content-Type: multipart/form-data\" \\\n"
                },
                {
                    "date": 1727303734306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,13 @@\n       -F \"file=@/path/to/your/file\" \\\n       -F \"model=Fast\" \\\n       -F \"target_chunk_length=512\" \\\n       -F \"ocr_strategy=Auto\"\n-    ```\n\\ No newline at end of file\n+    ```\n+\n+3. **Poll the task status**\n+\n+    ```bash\n+    curl -X GET https://api.chunkmydocs.com/api/task/${TASK_ID} \\\n+      -H \"Authorization: ${YOUR_API_KEY}\"\n+    ```\n+\n"
                },
                {
                    "date": 1727303742716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,4 +26,5 @@\n     curl -X GET https://api.chunkmydocs.com/api/task/${TASK_ID} \\\n       -H \"Authorization: ${YOUR_API_KEY}\"\n     ```\n \n+    \n"
                },
                {
                    "date": 1727303769753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       -F \"ocr_strategy=Auto\"\n     ```\n \n 3. **Poll the task status**\n-\n+    \n     ```bash\n     curl -X GET https://api.chunkmydocs.com/api/task/${TASK_ID} \\\n       -H \"Authorization: ${YOUR_API_KEY}\"\n     ```\n"
                },
                {
                    "date": 1727303894090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,24 @@\n     ```\n \n 3. **Poll the task status**\n     \n+   Use the following curl command to check the status of your task:\n+\n     ```bash\n     curl -X GET https://api.chunkmydocs.com/api/task/${TASK_ID} \\\n       -H \"Authorization: ${YOUR_API_KEY}\"\n     ```\n \n+   Keep polling this endpoint until the `status` field in the response changes to \"Succeeded\". Once successful, the `output` field in the response will contain the processed data.\n+\n+4. **Interpreting the Response**\n+\n+   The API returns a TaskResponse object with the following key fields:\n+   - `task_id`: Unique identifier for the task\n+   - `status`: Current status of the task (Starting, Processing, Succeeded, Failed, or Canceled)\n+   - `output`: Contains the processed data when the task is successful\n+   - `configuration`: Details of the task configuration\n+\n+   For a full list of fields, refer to the TaskResponse interface in our API documentation.\n+\n     \n"
                },
                {
                    "date": 1727303948110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,12 @@\n 1. **Create an Account**\n \n    Go to [chunkr.ai](https://www.chunkr.ai) and create an account. Once logged in, navigate to the API section to obtain your API key.\n \n-2. **Create a task with CURL**\n+2. **Create a task with curl**\n \n+   Use the following curl command to create a new task:\n+\n     ```bash\n     curl -X POST https://api.chunkmydocs.com/api/task \\\n       -H \"Content-Type: multipart/form-data\" \\\n       -H \"Authorization: ${YOUR_API_KEY}\" \\\n@@ -19,8 +21,10 @@\n       -F \"target_chunk_length=512\" \\\n       -F \"ocr_strategy=Auto\"\n     ```\n \n+   This command will return a TaskResponse object containing the `task_id` needed for polling the status.\n+\n 3. **Poll the task status**\n     \n    Use the following curl command to check the status of your task:\n \n@@ -36,9 +40,8 @@\n    The API returns a TaskResponse object with the following key fields:\n    - `task_id`: Unique identifier for the task\n    - `status`: Current status of the task (Starting, Processing, Succeeded, Failed, or Canceled)\n    - `output`: Contains the processed data when the task is successful\n-   - `configuration`: Details of the task configuration\n \n    For a full list of fields, refer to the TaskResponse interface in our API documentation.\n \n     \n"
                },
                {
                    "date": 1727304175417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,7 +41,7 @@\n    - `task_id`: Unique identifier for the task\n    - `status`: Current status of the task (Starting, Processing, Succeeded, Failed, or Canceled)\n    - `output`: Contains the processed data when the task is successful\n \n-   For a full list of fields, refer to the TaskResponse interface in our API documentation.\n+   For a full list of fields, refer to the TaskResponse interface in our API reference.\n \n     \n"
                },
                {
                    "date": 1727304204939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,7 +41,7 @@\n    - `task_id`: Unique identifier for the task\n    - `status`: Current status of the task (Starting, Processing, Succeeded, Failed, or Canceled)\n    - `output`: Contains the processed data when the task is successful\n \n-   For a full list of fields, refer to the TaskResponse interface in our API reference.\n+   For a full list of fields, refer to the TaskResponse interface in our [API reference](https://www.chunkr.ai/api-reference).\n \n     \n"
                },
                {
                    "date": 1727304229726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,7 +41,7 @@\n    - `task_id`: Unique identifier for the task\n    - `status`: Current status of the task (Starting, Processing, Succeeded, Failed, or Canceled)\n    - `output`: Contains the processed data when the task is successful\n \n-   For a full list of fields, refer to the TaskResponse interface in our [API reference](https://www.chunkr.ai/api-reference).\n+   For a full list of fields, refer to the TaskResponse interface in our [API reference](/task#task).\n \n     \n"
                },
                {
                    "date": 1727304267003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,7 +41,7 @@\n    - `task_id`: Unique identifier for the task\n    - `status`: Current status of the task (Starting, Processing, Succeeded, Failed, or Canceled)\n    - `output`: Contains the processed data when the task is successful\n \n-   For a full list of fields, refer to the TaskResponse interface in our [API reference](/task#task).\n+   For a full list of fields, and explaintaion of the output, refer to the [outputs](/outputs) page.\n \n     \n"
                },
                {
                    "date": 1727304278868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,7 +41,7 @@\n    - `task_id`: Unique identifier for the task\n    - `status`: Current status of the task (Starting, Processing, Succeeded, Failed, or Canceled)\n    - `output`: Contains the processed data when the task is successful\n \n-   For a full list of fields, and explaintaion of the output, refer to the [outputs](/outputs) page.\n+   For a full list of fields, and explanation of the output, refer to the [outputs](/outputs) page.\n \n     \n"
                },
                {
                    "date": 1727304286532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,7 +41,7 @@\n    - `task_id`: Unique identifier for the task\n    - `status`: Current status of the task (Starting, Processing, Succeeded, Failed, or Canceled)\n    - `output`: Contains the processed data when the task is successful\n \n-   For a full list of fields, and explanation of the output, refer to the [outputs](/outputs) page.\n+   For a full list of fields, and explanation of the output, refer to the [task](/task) page.\n \n     \n"
                },
                {
                    "date": 1727325093228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,6 @@\n-\n import CreateTask from '/snippets/create-task.mdx';\n \n-\n This guide provides a streamlined approach to using the Chunkr API for document processing and analysis with Python.\n The way you use the API is by creating a task for each document you want to process, and then polling the task status until it is completed.\n Checkout our github [repo](https://github.com/lumina-ai-inc/chunkr) for more examples and to view the full code.\n \n"
                },
                {
                    "date": 1727325107330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n 2. **Create a task with curl**\n \n    Use the following curl command to create a new task:\n \n-    <CreateTask />\n+<CreateTask />\n \n    This command will return a TaskResponse object containing the `task_id` needed for polling the status.\n \n 3. **Poll the task status**\n"
                }
            ],
            "date": 1727302191962,
            "name": "Commit-0",
            "content": "This guide provides a streamlined approach to using the Chunkr API for document processing and analysis with Python.\nThe way you use the API is by creating a task for each document you want to process, and then polling the task status until it is completed.\nCheckout our github [repo](https://github.com/lumina-ai-inc/chunkr) for more examples and to view the full code.\n\n## Setup\n\n1. **Create an Account and Get API Key**\n\n   Go to [chunkr.ai](https://chunkr.ai) and create an account. Once logged in, navigate to your account settings or API section to obtain your API key.\n\n2. **Set Up Environment Variables**\n\n   Create a `.env` file in your project directory and add your API key:\n\n   ```bash\n   echo \"INGEST_SERVER__API_KEY=your_api_key_here\" > .env\n   echo \"INGEST_SERVER__URL=https://api.chunkr.ai\" >> .env\n   ```\n\n   Replace `your_api_key_here` with the actual API key you obtained from chunkr.ai.\n\n3. **Create the Script**\n\n   Create a new file named `process_documents.py` and copy the following code into it:\n\n   ```python\n   import os, requests, time, glob, json\n   from dotenv import load_dotenv\n\n   load_dotenv(override=True)\n\n   def get_base_url(): return os.getenv(\"INGEST_SERVER__URL\")\n   def get_headers(): return {\"Authorization\": os.getenv(\"INGEST_SERVER__API_KEY\")}\n\n   def create_task(file_path):\n       with open(file_path, \"rb\") as file:\n           response = requests.post(f\"{get_base_url()}/api/task\",\n               files={\"file\": (os.path.basename(file_path), file, \"application/pdf\")},\n               data={\"model\": \"HighQuality\", \"target_chunk_length\": 0},\n               headers=get_headers()\n           )\n       if response.status_code != 200:\n           raise Exception(f\"API request failed with status code {response.status_code}: {response.text}\")\n       return response.json()[\"task_url\"]\n\n   def get_task(task_url): return requests.get(task_url, headers=get_headers()).json()\n\n   def save_to_json(output, file_name):\n       output_json_path = os.path.join(os.path.dirname(__file__), \"output\", f\"{file_name}_json.json\")\n       os.makedirs(os.path.dirname(output_json_path), exist_ok=True)\n       json.dump(output, open(output_json_path, \"w\"))\n       return output_json_path\n\n   def process_files():\n       for file_path in glob.glob(os.path.join(\"input\", \"*.pdf\")):\n           try:\n               task_url = create_task(file_path)\n               while True:\n                   task = get_task(task_url)\n                   if task[\"status\"] == \"Succeeded\":\n                       output = task.get(\"output\")\n                       if output is None: raise Exception(f\"Output not found for {file_path}\")\n                       output_json_path = save_to_json(output, os.path.basename(file_path).split(\".\")[0])\n                       break\n                   if task[\"status\"] in [\"Failed\", \"Canceled\"]:\n                       break\n                   time.sleep(1)\n           except Exception as e:\n               print(f\"Error processing {file_path}: {str(e)}\")\n\n   if __name__ == \"__main__\": process_files()\n   ```\n\n4. **Install Required Packages**\n\n   Install the necessary Python packages:\n\n   ```bash\n   pip install requests python-dotenv\n   ```\n\n5. **Prepare Input Files**\n\n   Create an `input` folder in the same directory and place your PDF files there.\n\n6. Run the script to start processing:\n\n   ```bash\n   python process_documents.py\n   ```\n\n7. The script will process all PDF files in the `input` folder:\n\n   - It creates a task for each PDF file\n   - Monitors the task status\n   - When a task succeeds, it downloads the output (bounding boxes) and saves it as a JSON file in the `output` folder\n\n8. Check the console output for processing status and any error messages.\n\n9. Once completed, you'll find the JSON output files in the `output` folder, named after the original PDF files.\n10. To annotate the PDF with the bounding boxes, you can use the `annotate_pdf.py` script in our github [repo](https://github.com/lumina-ai-inc/chunkr/blob/main/pyscripts/annotate.py)\n\n11. Here's an example of an annotated PDF with bounding boxes:\n\n![Annotated PDF Example](sample2.png)\n\nThis image shows a PDF document with bounding boxes drawn around the detected text regions, demonstrating the output of the annotation process.\n"
        }
    ]
}