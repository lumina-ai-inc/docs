{
    "sourceFile": "task.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1727304139893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727304306565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n The ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs). \n \n ![Model Diagram](sample2.png)\n \n-## Task\n+## TaskResponse\n \n The task object is the first object returned when you create a task. It contains the `task_id` which you can use to poll the task status.\n \n ```json\n"
                },
                {
                    "date": 1727304316210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n The ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs). \n \n ![Model Diagram](sample2.png)\n \n-## TaskResponse\n+## The Task Object\n \n The task object is the first object returned when you create a task. It contains the `task_id` which you can use to poll the task status.\n \n ```json\n"
                },
                {
                    "date": 1727304328185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ---\n title: Task\n description: \"Understanding the outputs of the Chunkr API\"\n ---\n-The ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs). \n+The ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs).\n \n ![Model Diagram](sample2.png)\n \n ## The Task Object\n"
                },
                {
                    "date": 1727304355422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n description: \"Understanding the outputs of the Chunkr API\"\n ---\n The ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs).\n \n+\n ![Model Diagram](sample2.png)\n \n ## The Task Object\n \n"
                },
                {
                    "date": 1727304366931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n description: \"Understanding the outputs of the Chunkr API\"\n ---\n The ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs).\n \n-\n ![Model Diagram](sample2.png)\n \n ## The Task Object\n \n"
                },
                {
                    "date": 1727304412788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,11 @@\n The ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs).\n \n ![Model Diagram](sample2.png)\n \n-## The Task Object\n+## The task object\n \n-The task object is the first object returned when you create a task. It contains the `task_id` which you can use to poll the task status.\n+The task object is the first object returned when you create a task\n \n ```json\n {\n   \"task_id\": \"1234567890\",\n"
                },
                {
                    "date": 1727304419040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n ![Model Diagram](sample2.png)\n \n ## The task object\n \n-The task object is the first object returned when you create a task\n+The task object is the first object returned when you create a task.\n \n ```json\n {\n   \"task_id\": \"1234567890\",\n"
                },
                {
                    "date": 1727304452193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,21 @@\n \n ```json\n {\n   \"task_id\": \"1234567890\",\n-  \"status\": \"pending\"\n+  \"status\": \"Processing\",\n+  \"created_at\": \"2023-04-01T12:00:00Z\",\n+  \"finished_at\": null,\n+  \"expires_at\": \"2023-04-08T12:00:00Z\",\n+  \"message\": \"Task is currently processing\",\n+  \"input_file_url\": \"https://example.com/input.pdf\",\n+  \"output\": null,\n+  \"task_url\": \"https://api.example.com/tasks/1234567890\",\n+  \"configuration\": {\n+    \"model\": \"gpt-3.5-turbo\",\n+    \"ocr_strategy\": \"Auto\",\n+    \"target_chunk_length\": 1000\n+  },\n+  \"file_name\": \"document.pdf\",\n+  \"page_count\": 10\n }\n ```\n"
                },
                {
                    "date": 1727304471141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   \"status\": \"Processing\",\n   \"created_at\": \"2023-04-01T12:00:00Z\",\n   \"finished_at\": null,\n   \"expires_at\": \"2023-04-08T12:00:00Z\",\n-  \"message\": \"Task is currently processing\",\n+  \"message\": \"Segementing\",\n   \"input_file_url\": \"https://example.com/input.pdf\",\n   \"output\": null,\n   \"task_url\": \"https://api.example.com/tasks/1234567890\",\n   \"configuration\": {\n"
                },
                {
                    "date": 1727304488414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   \"created_at\": \"2023-04-01T12:00:00Z\",\n   \"finished_at\": null,\n   \"expires_at\": \"2023-04-08T12:00:00Z\",\n   \"message\": \"Segementing\",\n-  \"input_file_url\": \"https://example.com/input.pdf\",\n+  \"input_file_url\": \"${presigned_url}\",\n   \"output\": null,\n   \"task_url\": \"https://api.example.com/tasks/1234567890\",\n   \"configuration\": {\n     \"model\": \"gpt-3.5-turbo\",\n"
                },
                {
                    "date": 1727304499627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   \"expires_at\": \"2023-04-08T12:00:00Z\",\n   \"message\": \"Segementing\",\n   \"input_file_url\": \"${presigned_url}\",\n   \"output\": null,\n-  \"task_url\": \"https://api.example.com/tasks/1234567890\",\n+  \"task_url\": \"https://api.chunkr.ai/task/1234567890\",\n   \"configuration\": {\n     \"model\": \"gpt-3.5-turbo\",\n     \"ocr_strategy\": \"Auto\",\n     \"target_chunk_length\": 1000\n"
                },
                {
                    "date": 1727304506966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   \"input_file_url\": \"${presigned_url}\",\n   \"output\": null,\n   \"task_url\": \"https://api.chunkr.ai/task/1234567890\",\n   \"configuration\": {\n-    \"model\": \"gpt-3.5-turbo\",\n+    \"model\": \"Fast\",\n     \"ocr_strategy\": \"Auto\",\n     \"target_chunk_length\": 1000\n   },\n   \"file_name\": \"document.pdf\",\n"
                },
                {
                    "date": 1727304550915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n ![Model Diagram](sample2.png)\n \n ## The task object\n \n-The task object is the first object returned when you create a task.\n+The task object is the first object returned when you create a task. It contains the `task_url_` which you can use to poll the task status. As well as the infromation about the file you are processing.\n \n ```json\n {\n   \"task_id\": \"1234567890\",\n@@ -23,9 +23,9 @@\n   \"task_url\": \"https://api.chunkr.ai/task/1234567890\",\n   \"configuration\": {\n     \"model\": \"Fast\",\n     \"ocr_strategy\": \"Auto\",\n-    \"target_chunk_length\": 1000\n+    \"target_chunk_length\": 512\n   },\n   \"file_name\": \"document.pdf\",\n   \"page_count\": 10\n }\n"
                },
                {
                    "date": 1727304562231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,10 @@\n ![Model Diagram](sample2.png)\n \n ## The task object\n \n-The task object is the first object returned when you create a task. It contains the `task_url_` which you can use to poll the task status. As well as the infromation about the file you are processing.\n+The task object is the first object returned when you create a task. It contains the `task_url_` which you can use to poll the task status. As well as the information about the file you are processing.\n+This is where you will get your output from when the task is successful.\n \n ```json\n {\n   \"task_id\": \"1234567890\",\n"
                },
                {
                    "date": 1727304573355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n ## The task object\n \n The task object is the first object returned when you create a task. It contains the `task_url_` which you can use to poll the task status. As well as the information about the file you are processing.\n-This is where you will get your output from when the task is successful.\n+The object also contains the `output` key which will contain your output when the task is successful.\n \n ```json\n {\n   \"task_id\": \"1234567890\",\n"
                },
                {
                    "date": 1727304581854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n ![Model Diagram](sample2.png)\n \n ## The task object\n \n-The task object is the first object returned when you create a task. It contains the `task_url_` which you can use to poll the task status. As well as the information about the file you are processing.\n+The task object is the first object returned when you create a task. It contains the `task_url` which you can use to poll the task status. As well as the information about the file you are processing.\n The object also contains the `output` key which will contain your output when the task is successful.\n \n ```json\n {\n"
                },
                {
                    "date": 1727304632373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n ![Model Diagram](sample2.png)\n \n ## The task object\n \n-The task object is the first object returned when you create a task. It contains the `task_url` which you can use to poll the task status. As well as the information about the file you are processing.\n+The task object is the first object returned when you create a task. It contains the information about the file you are processing.\n The object also contains the `output` key which will contain your output when the task is successful.\n \n ```json\n {\n@@ -30,4 +30,5 @@\n   \"file_name\": \"document.pdf\",\n   \"page_count\": 10\n }\n ```\n+It contains the `task_url` which you can use to poll the task status.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727304654078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n ## The task object\n \n The task object is the first object returned when you create a task. It contains the information about the file you are processing.\n-The object also contains the `output` key which will contain your output when the task is successful.\n+The `output` key which will contain your output when the task is successful.\n \n ```json\n {\n   \"task_id\": \"1234567890\",\n"
                },
                {
                    "date": 1727304691575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   \"created_at\": \"2023-04-01T12:00:00Z\",\n   \"finished_at\": null,\n   \"expires_at\": \"2023-04-08T12:00:00Z\",\n   \"message\": \"Segementing\",\n-  \"input_file_url\": \"${presigned_url}\",\n+  \"input_file_url\": \"https://presigned_url\",\n   \"output\": null,\n   \"task_url\": \"https://api.chunkr.ai/task/1234567890\",\n   \"configuration\": {\n     \"model\": \"Fast\",\n"
                },
                {
                    "date": 1727304734146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,5 +30,9 @@\n   \"file_name\": \"document.pdf\",\n   \"page_count\": 10\n }\n ```\n-It contains the `task_url` which you can use to poll the task status.\n\\ No newline at end of file\n+It contains the `task_url` which you can use to poll the task status.\n+\n+## The output object\n+\n+The output object is where the magic happens. It contains the data you need to power your RAG and LLM applications.\n"
                },
                {
                    "date": 1727304758223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,5 +34,15 @@\n It contains the `task_url` which you can use to poll the task status.\n \n ## The output object\n \n-The output object is where the magic happens. It contains the data you need to power your RAG and LLM applications.\n+The output object is where the magic happens. It contains the data you need to power your RAG and LLM applications. This is what it looks like:\n+\n+```json\n+{\n+  \"chunks\": [\n+    {\n+      \"chunk_id\": \"1234567890\",\n+      \"text\": \"This is the text of the chunk\",\n+      \"metadata\": {\n+        \"page_number\": 1,\n+```\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727304801215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,12 +37,55 @@\n \n The output object is where the magic happens. It contains the data you need to power your RAG and LLM applications. This is what it looks like:\n \n ```json\n-{\n-  \"chunks\": [\n+[\n     {\n-      \"chunk_id\": \"1234567890\",\n-      \"text\": \"This is the text of the chunk\",\n-      \"metadata\": {\n-        \"page_number\": 1,\n+      \"chunk_length\": 123,\n+      \"segments\": [\n+        {\n+          \"bbox\": {\n+            \"bottom_left\": [\n+              123\n+            ],\n+            \"bottom_right\": [\n+              123\n+            ],\n+            \"top_left\": [\n+              123\n+            ],\n+            \"top_right\": [\n+              123\n+            ]\n+          },\n+          \"content\": \"<string>\",\n+          \"html\": \"<string>\",\n+          \"image\": \"<string>\",\n+          \"markdown\": \"<string>\",\n+          \"ocr\": [\n+            {\n+              \"bbox\": {\n+                \"bottom_left\": [\n+                  123\n+                ],\n+                \"bottom_right\": [\n+                  123\n+                ],\n+                \"top_left\": [\n+                  123\n+                ],\n+                \"top_right\": [\n+                  123\n+                ]\n+              },\n+              \"confidence\": 123,\n+              \"text\": \"<string>\"\n+            }\n+          ],\n+          \"page_height\": 123,\n+          \"page_number\": 1,\n+          \"page_width\": 123,\n+          \"segment_id\": \"<string>\",\n+          \"segment_type\": \"Title\"\n+        }\n+      ]\n ```\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727304819589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,54 +38,56 @@\n The output object is where the magic happens. It contains the data you need to power your RAG and LLM applications. This is what it looks like:\n \n ```json\n [\n-    {\n-      \"chunk_length\": 123,\n-      \"segments\": [\n-        {\n-          \"bbox\": {\n-            \"bottom_left\": [\n-              123\n-            ],\n-            \"bottom_right\": [\n-              123\n-            ],\n-            \"top_left\": [\n-              123\n-            ],\n-            \"top_right\": [\n-              123\n-            ]\n-          },\n-          \"content\": \"<string>\",\n-          \"html\": \"<string>\",\n-          \"image\": \"<string>\",\n-          \"markdown\": \"<string>\",\n-          \"ocr\": [\n-            {\n-              \"bbox\": {\n-                \"bottom_left\": [\n-                  123\n-                ],\n-                \"bottom_right\": [\n-                  123\n-                ],\n-                \"top_left\": [\n-                  123\n-                ],\n-                \"top_right\": [\n-                  123\n-                ]\n-              },\n-              \"confidence\": 123,\n-              \"text\": \"<string>\"\n-            }\n+  {\n+    \"chunk_length\": 123,\n+    \"segments\": [\n+      {\n+        \"bbox\": {\n+          \"bottom_left\": [\n+            123\n           ],\n-          \"page_height\": 123,\n-          \"page_number\": 1,\n-          \"page_width\": 123,\n-          \"segment_id\": \"<string>\",\n-          \"segment_type\": \"Title\"\n-        }\n-      ]\n+          \"bottom_right\": [\n+            123\n+          ],\n+          \"top_left\": [\n+            123\n+          ],\n+          \"top_right\": [\n+            123\n+          ]\n+        },\n+        \"content\": \"<string>\",\n+        \"html\": \"<string>\",\n+        \"image\": \"<string>\",\n+        \"markdown\": \"<string>\",\n+        \"ocr\": [\n+          {\n+            \"bbox\": {\n+              \"bottom_left\": [\n+                123\n+              ],\n+              \"bottom_right\": [\n+                123\n+              ],\n+              \"top_left\": [\n+                123\n+              ],\n+              \"top_right\": [\n+                123\n+              ]\n+            },\n+            \"confidence\": 123,\n+            \"text\": \"<string>\"\n+          }\n+        ],\n+        \"page_height\": 123,\n+        \"page_number\": 1,\n+        \"page_width\": 123,\n+        \"segment_id\": \"<string>\",\n+        \"segment_type\": \"Title\"\n+      }\n+    ]\n+  }\n+]\n ```\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727321870268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n description: \"Understanding the outputs of the Chunkr API\"\n ---\n The ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs).\n \n-![Model Diagram](sample2.png)\n \n ## The task object\n \n The task object is the first object returned when you create a task. It contains the information about the file you are processing.\n"
                },
                {
                    "date": 1727322390529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n ---\n title: Task\n description: \"Understanding the outputs of the Chunkr API\"\n ---\n-The ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs).\n+The chunkr api works by creating a task for each document you want to process, and then processing them asynchronously.\n+When a task is first created it is queued for processing.\n+While the task is processing you can use the `task_url` to poll the task status until it is completed.\n+Once the task is completed the `output` field will contain your data.\n \n-\n ## The task object\n \n The task object is the first object returned when you create a task. It contains the information about the file you are processing.\n The `output` key which will contain your output when the task is successful.\n"
                },
                {
                    "date": 1727322412616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n ---\n title: Task\n-description: \"Understanding the outputs of the Chunkr API\"\n+description: \"Understanding the task object\"\n ---\n The chunkr api works by creating a task for each document you want to process, and then processing them asynchronously.\n When a task is first created it is queued for processing.\n While the task is processing you can use the `task_url` to poll the task status until it is completed.\n"
                },
                {
                    "date": 1727322429969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n title: Task\n description: \"Understanding the task object\"\n ---\n The chunkr api works by creating a task for each document you want to process, and then processing them asynchronously.\n-When a task is first created it is queued for processing.\n While the task is processing you can use the `task_url` to poll the task status until it is completed.\n Once the task is completed the `output` field will contain your data.\n \n ## The task object\n"
                },
                {
                    "date": 1727322457847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n description: \"Understanding the task object\"\n ---\n The chunkr api works by creating a task for each document you want to process, and then processing them asynchronously.\n While the task is processing you can use the `task_url` to poll the task status until it is completed.\n-Once the task is completed the `output` field will contain your data.\n \n ## The task object\n \n The task object is the first object returned when you create a task. It contains the information about the file you are processing.\n"
                },
                {
                    "date": 1727322510037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,5 +29,6 @@\n   \"file_name\": \"document.pdf\",\n   \"page_count\": 10\n }\n ```\n+\n The `task_url` which you can use to poll the task status.\n"
                },
                {
                    "date": 1727322653868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,10 @@\n You can see how to create and get a task [here](/quickstart#create-a-task-with-curl)\n \n ## Task Object\n \n-Both creating and gettting tasks return a task object. It contains the information about the file you are processing.\n+Both creating and gettting tasks return a task object. \n+It contains the information about the file you are processing.\n The `output` key which will contain your output when the task is successful.\n \n ```json\n {\n"
                }
            ],
            "date": 1727304139893,
            "name": "Commit-0",
            "content": "---\ntitle: Task\ndescription: \"Understanding the outputs of the Chunkr API\"\n---\nThe ChunkMyDocs API processes documents by analyzing their layout and segmenting them into meaningful chunks suitable for Retrieval-Augmented Generation (RAG) and Large Language Models (LLMs). \n\n![Model Diagram](sample2.png)\n\n## Task\n\nThe task object is the first object returned when you create a task. It contains the `task_id` which you can use to poll the task status.\n\n```json\n{\n  \"task_id\": \"1234567890\",\n  \"status\": \"pending\"\n}\n```\n"
        }
    ]
}